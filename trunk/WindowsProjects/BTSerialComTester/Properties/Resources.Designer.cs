//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BTSerialComTester.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BTSerialComTester.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BTSerialComTester can be used to test the serial communiation 
        ///functions of a BrewTroller. It will detect the capabilities of the 
        ///connected device and will enable the functions that are available. 
        ///It currently supports the ASCII protocol Schema 0 &amp; 1, and the
        ///beta version of the Binary protocol.
        ///
        ///For additional information visit &lt;http://www.BrewTroller.com&gt;..
        /// </summary>
        internal static string AboutDescription {
            get {
                return ResourceManager.GetString("AboutDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to License
        ///
        ///BTSerialComTester is free software: you can redistribute it and/or modify
        ///it under the terms of the GNU General Public License as published by
        ///the Free Software Foundation, either version 3 of the License, or
        ///(at your option) any later version.
        ///
        ///BTSerialComTester is distributed in the hope that it will be useful,
        ///but WITHOUT ANY WARRANTY; without even the implied warranty of
        ///MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        ///GNU General Public License for more details.
        ///
        ///You s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AboutGNULicense {
            get {
                return ResourceManager.GetString("AboutGNULicense", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Intel Hex File (*.hex) | *.hex.
        /// </summary>
        internal static string IntelHexFileDescriptor {
            get {
                return ResourceManager.GetString("IntelHexFileDescriptor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Off.
        /// </summary>
        internal static string LogOff {
            get {
                return ResourceManager.GetString("LogOff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log On.
        /// </summary>
        internal static string LogOn {
            get {
                return ResourceManager.GetString("LogOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialize EEPROM.
        /// </summary>
        internal static string MsgBoxHeader_InitializeEEPROM {
            get {
                return ResourceManager.GetString("MsgBoxHeader_InitializeEEPROM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \n .
        /// </summary>
        internal static string NewLinePlusSpace {
            get {
                return ResourceManager.GetString("NewLinePlusSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Done.
        /// </summary>
        internal static string StatusBar_Done {
            get {
                return ResourceManager.GetString("StatusBar_Done", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initializing the EEPROM will replace the current configuration settings.
        ///    
        ///EEPROM will be cleared and following defaults applied:
        ///  Heat Outputs : P=3, I=4, D=2, Cycle=0.4sec, Hysteresis = 5F (3C)
        ///  Grain Temp : 60F (16C)
        ///  Boil Temp : 212F (100C)
        ///  Boil Power : 100%
        ///  All Steps : Idle
        ///  All Programs : Erased
        ///
        ///Are you sure you want to continue?.
        /// </summary>
        internal static string WarningMsg_InitializeEE {
            get {
                return ResourceManager.GetString("WarningMsg_InitializeEE", resourceCulture);
            }
        }
    }
}
